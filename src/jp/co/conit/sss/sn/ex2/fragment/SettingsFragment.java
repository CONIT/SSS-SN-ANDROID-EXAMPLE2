/* * Copyright (C) 2012 CONIT Co., Ltd. * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *      http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package jp.co.conit.sss.sn.ex2.fragment;import static jp.co.conit.sss.sn.ex2.util.SNApiUtil.SENDER_ID;import jp.co.conit.sss.sn.ex2.R;import jp.co.conit.sss.sn.ex2.activity.MessagesActivity;import jp.co.conit.sss.sn.ex2.entitiy.SNServerResult;import jp.co.conit.sss.sn.ex2.util.PrefrerencesUtil;import jp.co.conit.sss.sn.ex2.util.SNApiUtil;import jp.co.conit.sss.sn.ex2.util.StringUtil;import android.app.Activity;import android.content.Intent;import android.os.AsyncTask;import android.os.Bundle;import android.support.v4.app.Fragment;import android.view.LayoutInflater;import android.view.View;import android.view.View.OnClickListener;import android.view.ViewGroup;import android.widget.Button;import android.widget.CheckBox;import android.widget.TextView;import com.google.android.gcm.GCMRegistrar;/** * プッシュ通信の設定、表示機能を提供するFragmentです。 *  * @author conit */public class SettingsFragment extends Fragment {    private Activity mParentActivity;    private Button mRegistBtn;    private TextView mLocaleText;    private CheckBox mCheckBoxWeb;    private CheckBox mCheckBoxText;    @Override    public void onAttach(Activity activity) {        super.onAttach(activity);        mParentActivity = activity;    }    public static SettingsFragment newInstance() {        SettingsFragment fragment = new SettingsFragment();        Bundle args = new Bundle();        fragment.setArguments(args);        return fragment;    }    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {        View view = inflater.inflate(R.layout.fragment_settings, null);        mRegistBtn = (Button) view.findViewById(R.id.btn_regist);        mRegistBtn.setOnClickListener(new OnClickListener() {            @Override            public void onClick(View v) {                v.setEnabled(false);                if (isSNRegisted()) {                    removeIDtoServer();                } else if (isGCMRegisted()) {                    removeIDtoServer();                } else {                    sendDeviceIDtoServer();                }            }        });        setRegistBtnState();        view.findViewById(R.id.btn_messages).setOnClickListener(new OnClickListener() {            @Override            public void onClick(View v) {                Intent intent = new Intent(mParentActivity, MessagesActivity.class);                startActivity(intent);            }        });        view.findViewById(R.id.btn_set_locale).setOnClickListener(new OnClickListener() {            @Override            public void onClick(View v) {                Intent intent = new Intent(android.provider.Settings.ACTION_LOCALE_SETTINGS);                startActivity(intent);            }        });        mLocaleText = (TextView) view.findViewById(R.id.text_locale);        mCheckBoxWeb = (CheckBox) view.findViewById(R.id.checkbox_web);        mCheckBoxText = (CheckBox) view.findViewById(R.id.checkbox_text);        return view;    }    /**     * 表示形式情報をSharedPreferencesに保存します。     *      * @param gender     */    private void saveViewType() {        StringBuilder sb = new StringBuilder();        if (mCheckBoxWeb.isChecked()) {            sb.append("web");        }        if (mCheckBoxText.isChecked()) {            if (sb.length() != 0) {                sb.append(",");            }            sb.append("text");        }        PrefrerencesUtil.setString(getActivity(), "view_type", sb.toString());    }    /**     * GCMに登録します。     */    private void sendDeviceIDtoServer() {        mRegistBtn.setBackgroundResource(R.drawable.bn_push_accession);        GCMRegistrar.checkDevice(mParentActivity.getApplicationContext());        final String registId = GCMRegistrar.getRegistrationId(mParentActivity);        if (registId.equals("")) {            saveViewType();            GCMRegistrar.register(mParentActivity.getApplicationContext(), SENDER_ID);        } else {            if (!isSNRegisted()) {                // GCMに登録されているが、SamuraiNotificationに登録されていない場合、一度unregistする                GCMRegistrar.unregister(mParentActivity.getApplicationContext());                mRegistBtn.setEnabled(true);                mRegistBtn.setBackgroundResource(R.drawable.btn_push_on_setting_selector);            }        }    }    /**     * GCMの登録を解除します。     */    private void removeIDtoServer() {        mRegistBtn.setBackgroundResource(R.drawable.bn_push_release);        SNUnregisterServerTask task = new SNUnregisterServerTask();        task.execute(GCMRegistrar.getRegistrationId(mParentActivity));    }    /**     * GCMに登録済みかを判定して登録ボタンを制御します。     */    public void setRegistBtnState() {        if (isSNRegisted()) {            mRegistBtn.setBackgroundResource(R.drawable.btn_push_off_setting_selector);        } else if (isGCMRegisted()) {            mRegistBtn.setBackgroundResource(R.drawable.btn_cancel_push_setting_selector);        } else {            mRegistBtn.setBackgroundResource(R.drawable.btn_push_on_setting_selector);        }        mRegistBtn.setEnabled(true);    }    /**     * SamuraiNotificationにregist_idが登録済みかを判定します。     *      * @return {@code true}登録済み。{@code false}未登録。     */    private boolean isSNRegisted() {        String registrationId = PrefrerencesUtil.getString(getActivity(), "regist_id", "");        return !StringUtil.isEmpty(registrationId);    }    /**     * GCMサーバーに端末が登録済みかを判定します。     *      * @return     */    private boolean isGCMRegisted() {        return GCMRegistrar.isRegistered(mParentActivity.getApplicationContext());    }    @Override    public void onResume() {        super.onResume();        mLocaleText.setText(StringUtil.getLanguage());    }    /**     * SamuraiNotificationサーバーからregistration_idを削除するタスクです。     *      * @author conit     */    public class SNUnregisterServerTask extends AsyncTask<String, Void, SNServerResult> {        public SNUnregisterServerTask() {        }        @Override        protected SNServerResult doInBackground(String... args) {            return SNApiUtil.unregister(args[0]);        }        @Override        protected void onPostExecute(SNServerResult result) {            GCMRegistrar.unregister(mParentActivity.getApplicationContext());        }    }}